openapi: 3.0.3
info:
  title: WasaText - OpenAPI 3.0
  description: |
    This API allows sharing and receiving messages among users in WasaText.
  version: 0.0.1
tags:
  - name: Users
    description: Operations related to user profiles
  - name: Conversations
    description: Operations to manage user conversations
  - name: Messages
    description: Operations to send, forward, comment on, and delete messages
  - name: Groups
    description: Operations for managing groups, including adding members and changing group details

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      title: User
      type: object
      description: Details of a registered user
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          description: Unique identifier of the User
        username:
          type: string
          description: Username of the User
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_]+$"
        photo:
          type: string
          format: uri
          pattern: "^[a-zA-Z0-9_]+$"
          description: URL to the User's profile photo
          minLength: 1
          maxLength: 20
      required:
        - id
        - username
  

    Conversation:
      title: Conversation
      type: object
      description: Details of a conversation between users
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          description: Unique identifier of the conversation
        lastconvo:
          type: string
          format: date-time
          pattern: "^[a-zA-Z0-9_]+$"
          description: Timestamp of the last message in the conversation
          minLength: 1
          maxLength: 20
        participant:
          allOf:
            - $ref: '#/components/schemas/User'
            - description: The participant (receiver) in the conversation
          description: Information about the participant in the conversation, typically the receiver or another user involved in the exchange.

      required:
        - id
        - lastconvo
        - participant

    # Group:
    #   title: Group
    #   type: object
    #   description: Details of a group with multiple participants
    #   properties:
    #     id: 
    #       type: integer
    #       format: int64
    #       readOnly: true
    #       description: Unique identifier of the Group
    #     photo:
    #       type: string
    #       format: uri
    #       pattern: "^[a-zA-Z0-9_]+$"
    #       description: URL of the group's profile photo
    #     members:
    #       type: array
    #       items: 
    #         $ref: '#/components/schemas/User'
    #       description: List of users who are members of the group
    #       minItems: 1
    #       maxItems: 1000
    #   required: 
    #     - id
    #     - members

    Message:
      title: Message
      type: object
      description: Details of a message sent between users or in a group
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          description: Unique identifier of the message
        timestamp:
          type: string
          format: date-time
          pattern: "^[a-zA-Z0-9_]+$"
          description: Timestamp when the message was sent
          minLength: 1
          maxLength: 20
        content:
          description: Content of the message, which can either be text or a media file URL
          oneOf:
            - type: string
              description: Text content of the message
              minLength: 1
              maxLength: 1000
              pattern: "^.*$"
            - type: string
              minLength: 3
              maxLength: 50
              pattern: "^.*$"
              format: uri
              description: URL pointing to an attached image or media file
        senderUsername:
          description: Information about the user who sent the message, including their username and profile details.
          allOf:
            - $ref: '#/components/schemas/User'
            - description: Username of the sender
        status:
          type: string
          pattern: "^[a-zA-Z0-9_]+$"
          minLength: 3
          maxLength: 50
          
          enum:
            - "sent"
            - "delivered"
            - "read"
          description: Status of the message, represented by "sent," "delivered," or "read"
      required:
        - id
        - timestamp
        - content
        - senderUsername
        - status

      
    

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: some description
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: Maria
                  pattern: '^[a-zA-Z0-9]+$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: some description
                type: object
                properties:
                  identifier:
                    type: string
                    pattern: "^[a-zA-Z0-9_]+$"
                    minLength: 3
                    maxLength: 50
                    description: Identifier of the logged-in user
                    example: "abcdef012345"


  /users/me/username:
    put:
      tags:
        - Users
      summary: Set my username
      description: Updates the username of the authenticated user.
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for updating the username
              properties:
                username:
                  type: string
                  description: New username for the user
                  minLength: 3
                  maxLength: 50
                  pattern: "^[a-zA-Z0-9_]+$"
                  example: "new_username"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                description: Response object for a successful username update
                properties:
                  message:
                    type: string
                    description: Success message confirming the username update
                    pattern: ^.*$
                    minLength: 3
                    maxLength: 50
                    example: "Username updated successfully"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
                description: Error message for invalid input
                pattern: "^[a-zA-Z0-9_]+$"
                minLength: 3
                maxLength: 50
        '409':
          description: Username already in use
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating the username is already taken
                pattern: "^[a-zA-Z0-9_]+$"
                minLength: 3
                maxLength: 50


  /users/{id}/conversations:
    get:
      tags:
        - Conversations
      summary: Get my conversations
      description: Retrieves a list of all conversations involving the authenticated user.
      operationId: getMyConversations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique identifier of the user whose conversations are being retrieved.
      responses:
        '200':
          description: List of conversations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                description: An array containing conversation objects
                items:
                  $ref: '#/components/schemas/Conversation'
                minItems: 1
                maxItems: 100


  /users/{id}/conversations/{c_id}:
    get:
      tags:
        - Conversations
      summary: Get a specific conversation
      description: Retrieves details of a specific conversation by its unique ID.
      operationId: getConversation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique identifier of the user who is part of the conversation.
        - name: c_id
          in: path
          required: true
          schema:
            type: integer
          description: The unique identifier of the conversation being retrieved.
      responses:
        '200':
          description: Conversation details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
                description: Schema of a conversation object containing detailed information about the conversation.
        '404':
          description: Conversation not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating that the requested conversation was not found.
                pattern: ^.*$
                minLength: 3
                maxLength: 50
                example: "Conversation not found"



  /users/{id}/conversations/{c_id}/messages:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.

    get:
      tags:
        - Messages
      summary: Get messages in a conversation
      description: Retrieves all messages within a specific conversation for the authenticated user.
      operationId: getMessagesInConversation
      responses:
        '200':
          description: List of messages retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                description: An array containing message objects in the specified conversation.
                items:
                  $ref: '#/components/schemas/Message'
                minItems: 1
                maxItems: 100

    post:
      tags:
        - Messages
      summary: Send a message in a conversation
      description: Sends a new message within a specific conversation for the authenticated user.
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for creating a new message.
              properties:
                content:
                  type: string
                  description: The content of the message to be sent.
                  pattern: "^[a-zA-Z0-9_]+$"
                  minLength: 3
                  maxLength: 50
                status:
                  type: string
                  description: The status of the message, indicating its delivery state.
                  pattern: "^[a-zA-Z0-9_]+$"
                  minLength: 3
                  maxLength: 50
                  enum:
                    - "sent"
                    - "delivered"
                    - "read"
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /users/{id}/conversations/{c_id}/messages/{m_id}/forward:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.
      - name: m_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the message to be forwarded.

    post:
      tags:
        - Messages
      summary: Forward a message
      description: Forwards an existing message to another conversation for the authenticated user.
      operationId: forwardMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for forwarding a message to another conversation.
              properties:
                conversationId:
                  type: integer
                  description: The unique identifier of the target conversation where the message will be forwarded.
      responses:
        '200':
          description: Message forwarded successfully.
          content:
            application/json:
              schema:
                type: object
                description: A success response containing a confirmation message.
                properties:
                  message:
                    type: string
                    description: A confirmation message indicating the message was forwarded successfully.
                    pattern: ^.*$
                    minLength: 3
                    maxLength: 50
                    example: "Message forwarded successfully"
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: string
                description: An error message indicating the requested message could not be found.
                pattern: "^[a-zA-Z0-9_]+$"
                minLength: 3
                maxLength: 50



  /users/{id}/conversations/{c_id}/messages/{m_id}/comments:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.
      - name: m_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the message.

    post:
      tags:
        - Messages
      summary: Comment on a message
      description: Adds a comment to a specific message in a conversation.
      operationId: commentMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for adding a comment to a message.
              properties:
                comment:
                  type: string
                  description: The text content of the comment.
                  pattern: "^[a-zA-Z0-9_]+$"
                  minLength: 1
                  maxLength: 1000
      responses:
        '201':
          description: Comment added successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response indicating that the comment was added successfully.
                properties:
                  message:
                    type: string
                    minLength: 0
                    maxLength: 50
                    description: Confirmation message.
                    pattern: ^.*$
                    example: "Comment added successfully"
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating the message could not be found.
                pattern: "^[a-zA-Z0-9_]+$"
                minLength: 3
                maxLength: 50

  /users/{id}/conversations/{c_id}/messages/{m_id}/comments/{commentId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.
      - name: m_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the message.
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the comment.

    delete:
      tags:
        - Messages
      summary: Delete a comment from a message
      description: Deletes a specific comment from a message by its unique identifiers.
      operationId: uncommentMessage
      responses:
        '204':
          description: Comment deleted successfully.
        '404':
          description: Message or comment not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating that the message or comment could not be found.
                pattern: "^[a-zA-Z0-9_]+$"
                minLength: 3
                maxLength: 50

  /users/{id}/conversations/{c_id}/messages/{m_id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.
      - name: m_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the message.

    delete:
      tags:
        - Messages
      summary: Delete a specific message
      description: Deletes a message by its unique identifier in a conversation.
      operationId: deleteMessage
      responses:
        '204':
          description: Message deleted successfully.
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating the message could not be found.
                pattern: "^[a-zA-Z0-9_]+$"
                minLength: 3
                maxLength: 50



  /users/{id}/conversations/{c_id}/groups/{g_id}/members:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.
      - name: g_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the group.

    post:
      tags:
        - Groups
      summary: Add a user to a group
      description: Adds a specified user to the group by its unique identifier.
      operationId: addToGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for adding a user to the group.
              properties:
                userId:
                  type: integer
                  description: The unique identifier of the user to be added to the group.
      responses:
        '200':
          description: User added to the group successfully.
          content:
            application/json:
              schema:
                type: object
                description: Success response indicating the user was added.
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                    pattern: "^[a-zA-Z0-9_ ]+$"
                    minLength: 3
                    maxLength: 50
                    example: "User added to the group successfully"
        '404':
          description: Group or user not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating the group or user could not be found.
                pattern: "^[a-zA-Z0-9_ ]+$"
                minLength: 3
                maxLength: 50

  /users/{id}/conversations/{c_id}/groups/{g_id}/leave:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.
      - name: g_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the group.

    post:
      tags:
        - Groups
      summary: Leave a group
      description: Allows the authenticated user to leave the specified group.
      operationId: leaveGroup
      responses:
        '200':
          description: Successfully left the group.
          content:
            application/json:
              schema:
                type: object
                description: Success response indicating the user has left the group.
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                    pattern: "^[a-zA-Z0-9_ ]+$"
                    minLength: 3
                    maxLength: 50
                    example: "Successfully left the group"
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating the group could not be found.
                pattern: "^[a-zA-Z0-9_ ]+$"
                minLength: 3
                maxLength: 50

  /users/{id}/conversations/{c_id}/groups/{g_id}/name:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation.
      - name: g_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the group.

    put:
      tags:
        - Groups
      summary: Update group name
      description: Updates the name of the specified group by its unique identifier.
      operationId: setGroupName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for updating the group's name.
              properties:
                name:
                  type: string
                  description: The new name for the group.
                  minLength: 1
                  maxLength: 100
                  pattern: "^[a-zA-Z0-9_ ]+$"
      responses:
        '200':
          description: Group name updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: Success response indicating the group's name was updated.
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                    pattern: "^[a-zA-Z0-9_ ]+$"
                    minLength: 3
                    maxLength: 50
                    example: "Group name updated successfully"
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating the group could not be found.
                pattern: "^[a-zA-Z0-9_ ]+$"
                minLength: 3
                maxLength: 50



  /users/{id}/conversations/{c_id}/groups/{g_id}/photo:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the user who is performing the operation.
      - name: c_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the conversation that contains the group.
      - name: g_id
        in: path
        required: true
        schema:
          type: integer
        description: The unique identifier of the group whose photo is being updated.

    put:
      tags:
        - Groups
      summary: Update group photo
      description: Allows the authenticated user to update the profile photo of a specific group identified by its unique ID within a conversation.
      operationId: setGroupPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload containing the URL of the new group photo.
              properties:
                photo:
                  type: string
                  description: The URL of the new photo to set as the group's profile photo.
                  pattern: "^(https?://).+$"
                  minLength: 1
                  maxLength: 100
                  format: uri
                  example: "https://example.com/photos/group-photo.png"
      responses:
        '200':
          description: Group photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: Success response containing a confirmation message.
                properties:
                  message:
                    type: string
                    description: A confirmation message indicating the group photo was updated successfully.
                    pattern: ^.*$
                    minLength: 3
                    maxLength: 100
                    example: "Group photo updated successfully."
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: string
                description: Error message indicating the specified group could not be found.
                pattern: ^.*$
                minLength: 3
                maxLength: 50